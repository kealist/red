

Red/System [

	Title: {Autogenerated output from script}

]

#switch OS [

		Windows		[#define library "glpk.dll"]

		MacOSX		[#define library ""]

		Syllable	[#define library ""]

		#default	[#define library ""]

	]

#import [library cdecl [
	#define _GLPK_H			extern
	#define GLP_MAJOR_VERSION			4
	#define GLP_MINOR_VERSION			34
	#define _GLP_PROB			typedef
	#define GLP_MIN			1
	#define GLP_MAX			2
	#define GLP_CV			1
	#define GLP_IV			2
	#define GLP_BV			3
	#define GLP_FR			1
	#define GLP_LO			2
	#define GLP_UP			3
	#define GLP_DB			4
	#define GLP_FX			5
	#define GLP_BS			1
	#define GLP_NL			2
	#define GLP_NU			3
	#define GLP_NF			4
	#define GLP_NS			5
	#define GLP_SF_GM			01h
	#define GLP_SF_EQ			10h
	#define GLP_SF_2N			20h
	#define GLP_SF_SKIP			40h
	#define GLP_SF_AUTO			80h
	#define GLP_SOL			1
	#define GLP_IPT			2
	#define GLP_MIP			3
	#define GLP_UNDEF			1
	#define GLP_FEAS			2
	#define GLP_INFEAS			3
	#define GLP_NOFEAS			4
	#define GLP_OPT			5
	#define GLP_UNBND			6
	#define _GLP_BFCP			typedef
	#define GLP_BF_FT			1
	#define GLP_BF_BG			2
	#define GLP_BF_GR			3
	#define GLP_MSG_OFF			0
	#define GLP_MSG_ERR			1
	#define GLP_MSG_ON			2
	#define GLP_MSG_ALL			3
	#define GLP_MSG_DBG			4
	#define GLP_PRIMAL			1
	#define GLP_DUALP			2
	#define GLP_DUAL			3
	#define GLP_PT_STD			11h
	#define GLP_PT_PSE			22h
	#define GLP_RT_STD			11h
	#define GLP_RT_HAR			22h
	#define _GLP_TREE			typedef
	#define GLP_MSG_OFF			0
	#define GLP_MSG_ERR			1
	#define GLP_MSG_ON			2
	#define GLP_MSG_ALL			3
	#define GLP_MSG_DBG			4
	#define GLP_BR_FFV			1
	#define GLP_BR_LFV			2
	#define GLP_BR_MFV			3
	#define GLP_BR_DTH			4
	#define GLP_BR_HPC			5
	#define GLP_BT_DFS			1
	#define GLP_BT_BFS			2
	#define GLP_BT_BLB			3
	#define GLP_BT_BPH			4
	#define GLP_PP_NONE			0
	#define GLP_PP_ROOT			1
	#define GLP_PP_ALL			2
	#define GLP_RF_REG			0
	#define GLP_RF_LAZY			1
	#define GLP_RF_CUT			2
	#define GLP_RF_GMI			1
	#define GLP_RF_MIR			2
	#define GLP_RF_COV			3
	#define GLP_RF_CLQ			4
	#define GLP_ON			1
	#define GLP_OFF			0
	#define GLP_IROWGEN			01h
	#define GLP_IBINGO			02h
	#define GLP_IHEUR			03h
	#define GLP_ICUTGEN			04h
	#define GLP_IBRANCH			05h
	#define GLP_ISELECT			06h
	#define GLP_IPREPRO			07h
	#define GLP_NO_BRNCH			0
	#define GLP_DN_BRNCH			1
	#define GLP_UP_BRNCH			2
	#define GLP_EBADB			01h
	#define GLP_ESING			02h
	#define GLP_ECOND			03h
	#define GLP_EBOUND			04h
	#define GLP_EFAIL			05h
	#define GLP_EOBJLL			06h
	#define GLP_EOBJUL			07h
	#define GLP_EITLIM			08h
	#define GLP_ETMLIM			09h
	#define GLP_ENOPFS			0Ah
	#define GLP_ENODFS			0Bh
	#define GLP_EROOT			0Ch
	#define GLP_ESTOP			0Dh
	#define GLP_EMIPGAP			0Eh
	#define GLP_ENOFEAS			0Fh
	#define GLP_ENOCVG			10h
	#define GLP_EINSTAB			11h
	#define GLP_MPS_DECK			1
	#define GLP_MPS_FILE			2
	#define _GLP_TRAN			typedef
	glp-set-prob-name: "glp_set_prob_name" [
		lp	[pointer! [struct!]]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	glp-set-obj-name: "glp_set_obj_name" [
		lp	[pointer! [struct!]]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	glp-set-obj-dir: "glp_set_obj_dir" [
		lp	[pointer! [struct!]]
		dir	[integer!]
		return: 	[void!]
	]
	glp-add-rows: "glp_add_rows" [
		lp	[pointer! [struct!]]
		nrs	[integer!]
		return: 	[integer!]
	]
	glp-add-cols: "glp_add_cols" [
		lp	[pointer! [struct!]]
		ncs	[integer!]
		return: 	[integer!]
	]
	glp-set-row-name: "glp_set_row_name" [
		lp	[pointer! [struct!]]
		i	[integer!]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	glp-set-col-name: "glp_set_col_name" [
		lp	[pointer! [struct!]]
		j	[integer!]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	glp-set-row-bnds: "glp_set_row_bnds" [
		lp	[pointer! [struct!]]
		i	[integer!]
		type	[integer!]
		lb	[double!]
		ub	[double!]
		return: 	[void!]
	]
	glp-set-col-bnds: "glp_set_col_bnds" [
		lp	[pointer! [struct!]]
		j	[integer!]
		type	[integer!]
		lb	[double!]
		ub	[double!]
		return: 	[void!]
	]
	glp-set-obj-coef: "glp_set_obj_coef" [
		lp	[pointer! [struct!]]
		j	[integer!]
		coef	[double!]
		return: 	[void!]
	]
	glp-set-mat-row: "glp_set_mat_row" [
		lp	[pointer! [struct!]]
		i	[integer!]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[void!]
	]
	glp-set-mat-col: "glp_set_mat_col" [
		lp	[pointer! [struct!]]
		j	[integer!]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[void!]
	]
	glp-load-matrix: "glp_load_matrix" [
		lp	[pointer! [struct!]]
		ne	[integer!]
		ia	[integer!]
		ja	[integer!]
		ar	[double!]
		return: 	[void!]
	]
	glp-del-rows: "glp_del_rows" [
		lp	[pointer! [struct!]]
		nrs	[integer!]
		num	[integer!]
		return: 	[void!]
	]
	glp-del-cols: "glp_del_cols" [
		lp	[pointer! [struct!]]
		ncs	[integer!]
		num	[integer!]
		return: 	[void!]
	]
	glp-copy-prob: "glp_copy_prob" [
		dest	[pointer! [struct!]]
		prob	[pointer! [struct!]]
		names	[integer!]
		return: 	[void!]
	]
	glp-erase-prob: "glp_erase_prob" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-delete-prob: "glp_delete_prob" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	*glp-get-prob-name: "*glp_get_prob_name" [
		lp	[pointer! [struct!]]
		return: 	[byte!]
	]
	*glp-get-obj-name: "*glp_get_obj_name" [
		lp	[pointer! [struct!]]
		return: 	[byte!]
	]
	glp-get-obj-dir: "glp_get_obj_dir" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-num-rows: "glp_get_num_rows" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-num-cols: "glp_get_num_cols" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	*glp-get-row-name: "*glp_get_row_name" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[byte!]
	]
	*glp-get-col-name: "*glp_get_col_name" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[byte!]
	]
	glp-get-row-type: "glp_get_row_type" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[integer!]
	]
	glp-get-row-lb: "glp_get_row_lb" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-get-row-ub: "glp_get_row_ub" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-get-col-type: "glp_get_col_type" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[integer!]
	]
	glp-get-col-lb: "glp_get_col_lb" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-get-col-ub: "glp_get_col_ub" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-get-obj-coef: "glp_get_obj_coef" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-get-num-nz: "glp_get_num_nz" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-mat-row: "glp_get_mat_row" [
		lp	[pointer! [struct!]]
		i	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	glp-get-mat-col: "glp_get_mat_col" [
		lp	[pointer! [struct!]]
		j	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	glp-create-index: "glp_create_index" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-find-row: "glp_find_row" [
		lp	[pointer! [struct!]]
		name	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-find-col: "glp_find_col" [
		lp	[pointer! [struct!]]
		name	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-delete-index: "glp_delete_index" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-set-rii: "glp_set_rii" [
		lp	[pointer! [struct!]]
		i	[integer!]
		rii	[double!]
		return: 	[void!]
	]
	glp-set-sjj: "glp_set_sjj" [
		lp	[pointer! [struct!]]
		j	[integer!]
		sjj	[double!]
		return: 	[void!]
	]
	glp-get-rii: "glp_get_rii" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-get-sjj: "glp_get_sjj" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-scale-prob: "glp_scale_prob" [
		lp	[pointer! [struct!]]
		flags	[integer!]
		return: 	[void!]
	]
	glp-unscale-prob: "glp_unscale_prob" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-set-row-stat: "glp_set_row_stat" [
		lp	[pointer! [struct!]]
		i	[integer!]
		stat	[integer!]
		return: 	[void!]
	]
	glp-set-col-stat: "glp_set_col_stat" [
		lp	[pointer! [struct!]]
		j	[integer!]
		stat	[integer!]
		return: 	[void!]
	]
	glp-std-basis: "glp_std_basis" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-adv-basis: "glp_adv_basis" [
		lp	[pointer! [struct!]]
		flags	[integer!]
		return: 	[void!]
	]
	glp-cpx-basis: "glp_cpx_basis" [
		lp	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-simplex: "glp_simplex" [
		lp	[pointer! [struct!]]
		parm	[pointer! ["glp_smcp"]]
		return: 	[integer!]
	]
	glp-exact: "glp_exact" [
		lp	[pointer! [struct!]]
		parm	[pointer! ["glp_smcp"]]
		return: 	[integer!]
	]
	glp-init-smcp: "glp_init_smcp" [
		parm	[pointer! ["glp_smcp"]]
		return: 	[void!]
	]
	glp-get-status: "glp_get_status" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-prim-stat: "glp_get_prim_stat" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-dual-stat: "glp_get_dual_stat" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-obj-val: "glp_get_obj_val" [
		lp	[pointer! [struct!]]
		return: 	[double!]
	]
	glp-get-row-stat: "glp_get_row_stat" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[integer!]
	]
	glp-get-row-prim: "glp_get_row_prim" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-get-row-dual: "glp_get_row_dual" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-get-col-stat: "glp_get_col_stat" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[integer!]
	]
	glp-get-col-prim: "glp_get_col_prim" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-get-col-dual: "glp_get_col_dual" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-get-unbnd-ray: "glp_get_unbnd_ray" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-interior: "glp_interior" [
		lp	[pointer! [struct!]]
		parm	[pointer! [void!]]
		return: 	[integer!]
	]
	glp-ipt-status: "glp_ipt_status" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-ipt-obj-val: "glp_ipt_obj_val" [
		lp	[pointer! [struct!]]
		return: 	[double!]
	]
	glp-ipt-row-prim: "glp_ipt_row_prim" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-ipt-row-dual: "glp_ipt_row_dual" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-ipt-col-prim: "glp_ipt_col_prim" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-ipt-col-dual: "glp_ipt_col_dual" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-set-col-kind: "glp_set_col_kind" [
		mip	[pointer! [struct!]]
		j	[integer!]
		kind	[integer!]
		return: 	[void!]
	]
	glp-get-col-kind: "glp_get_col_kind" [
		mip	[pointer! [struct!]]
		j	[integer!]
		return: 	[integer!]
	]
	glp-get-num-int: "glp_get_num_int" [
		mip	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-num-bin: "glp_get_num_bin" [
		mip	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-intopt: "glp_intopt" [
		mip	[pointer! [struct!]]
		parm	[pointer! ["glp_iocp"]]
		return: 	[integer!]
	]
	glp-init-iocp: "glp_init_iocp" [
		parm	[pointer! ["glp_iocp"]]
		return: 	[void!]
	]
	glp-mip-status: "glp_mip_status" [
		mip	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-mip-obj-val: "glp_mip_obj_val" [
		mip	[pointer! [struct!]]
		return: 	[double!]
	]
	glp-mip-row-val: "glp_mip_row_val" [
		mip	[pointer! [struct!]]
		i	[integer!]
		return: 	[double!]
	]
	glp-mip-col-val: "glp_mip_col_val" [
		mip	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	glp-read-sol: "glp_read_sol" [
		lp	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-write-sol: "glp_write_sol" [
		lp	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-read-ipt: "glp_read_ipt" [
		lp	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-write-ipt: "glp_write_ipt" [
		lp	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-read-mip: "glp_read_mip" [
		mip	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-write-mip: "glp_write_mip" [
		mip	[pointer! [struct!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-bf-exists: "glp_bf_exists" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-factorize: "glp_factorize" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-bf-updated: "glp_bf_updated" [
		lp	[pointer! [struct!]]
		return: 	[integer!]
	]
	glp-get-bfcp: "glp_get_bfcp" [
		lp	[pointer! [struct!]]
		parm	[pointer! ["glp_bfcp"]]
		return: 	[void!]
	]
	glp-set-bfcp: "glp_set_bfcp" [
		lp	[pointer! [struct!]]
		parm	[pointer! ["glp_bfcp"]]
		return: 	[void!]
	]
	glp-get-bhead: "glp_get_bhead" [
		lp	[pointer! [struct!]]
		k	[integer!]
		return: 	[integer!]
	]
	glp-get-row-bind: "glp_get_row_bind" [
		lp	[pointer! [struct!]]
		i	[integer!]
		return: 	[integer!]
	]
	glp-get-col-bind: "glp_get_col_bind" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[integer!]
	]
	glp-ftran: "glp_ftran" [
		lp	[pointer! [struct!]]
		x	[double!]
		return: 	[void!]
	]
	glp-btran: "glp_btran" [
		lp	[pointer! [struct!]]
		x	[double!]
		return: 	[void!]
	]
	glp-eval-tab-row: "glp_eval_tab_row" [
		lp	[pointer! [struct!]]
		k	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	glp-eval-tab-col: "glp_eval_tab_col" [
		lp	[pointer! [struct!]]
		k	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	glp-ios-reason: "glp_ios_reason" [
		tree	[pointer! ["glp_tree"]]
		return: 	[integer!]
	]
	*glp-ios-get-prob: "*glp_ios_get_prob" [
		tree	[pointer! ["glp_tree"]]
		return: 	[glp_prob!]
	]
	glp-ios-tree-size: "glp_ios_tree_size" [
		tree	[pointer! ["glp_tree"]]
		a_cnt	[pointer! [integer!]]
		n_cnt	[pointer! [integer!]]
		t_cnt	[pointer! [integer!]]
		return: 	[void!]
	]
	glp-ios-curr-node: "glp_ios_curr_node" [
		tree	[pointer! ["glp_tree"]]
		return: 	[integer!]
	]
	glp-ios-next-node: "glp_ios_next_node" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[integer!]
	]
	glp-ios-prev-node: "glp_ios_prev_node" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[integer!]
	]
	glp-ios-up-node: "glp_ios_up_node" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[integer!]
	]
	glp-ios-node-level: "glp_ios_node_level" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[integer!]
	]
	glp-ios-node-bound: "glp_ios_node_bound" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[double!]
	]
	glp-ios-best-node: "glp_ios_best_node" [
		tree	[pointer! ["glp_tree"]]
		return: 	[integer!]
	]
	glp-ios-mip-gap: "glp_ios_mip_gap" [
		tree	[pointer! ["glp_tree"]]
		return: 	[double!]
	]
	*glp-ios-node-data: "*glp_ios_node_data" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[void!]
	]
	glp-ios-row-attr: "glp_ios_row_attr" [
		tree	[pointer! ["glp_tree"]]
		i	[integer!]
		attr	[pointer! ["glp_attr"]]
		return: 	[void!]
	]
	glp-ios-pool-size: "glp_ios_pool_size" [
		tree	[pointer! ["glp_tree"]]
		return: 	[integer!]
	]
	glp-ios-add-row: "glp_ios_add_row" [
		tree	[pointer! ["glp_tree"]]
		name	[pointer! [byte!]]
		klass	[integer!]
		flags	[integer!]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		type	[integer!]
		rhs	[double!]
		return: 	[integer!]
	]
	glp-ios-del-row: "glp_ios_del_row" [
		tree	[pointer! ["glp_tree"]]
		i	[integer!]
		return: 	[void!]
	]
	glp-ios-clear-pool: "glp_ios_clear_pool" [
		tree	[pointer! ["glp_tree"]]
		return: 	[void!]
	]
	glp-ios-can-branch: "glp_ios_can_branch" [
		tree	[pointer! ["glp_tree"]]
		j	[integer!]
		return: 	[integer!]
	]
	glp-ios-branch-upon: "glp_ios_branch_upon" [
		tree	[pointer! ["glp_tree"]]
		j	[integer!]
		sel	[integer!]
		return: 	[void!]
	]
	glp-ios-select-node: "glp_ios_select_node" [
		tree	[pointer! ["glp_tree"]]
		p	[integer!]
		return: 	[void!]
	]
	glp-ios-heur-sol: "glp_ios_heur_sol" [
		tree	[pointer! ["glp_tree"]]
		x	[double!]
		return: 	[integer!]
	]
	glp-ios-terminate: "glp_ios_terminate" [
		tree	[pointer! ["glp_tree"]]
		return: 	[void!]
	]
	glp-term-out: "glp_term_out" [
		flag	[integer!]
		return: 	[void!]
	]
	*glp-malloc: "*glp_malloc" [
		size	[integer!]
		return: 	[void!]
	]
	*glp-calloc: "*glp_calloc" [
		n	[integer!]
		size	[integer!]
		return: 	[void!]
	]
	glp-free: "glp_free" [
		ptr	[pointer! [void!]]
		return: 	[void!]
	]
	glp-mem-usage: "glp_mem_usage" [
		count	[pointer! [integer!]]
		cpeak	[pointer! [integer!]]
		total	[pointer! ["glp_long"]]
		tpeak	[pointer! ["glp_long"]]
		return: 	[void!]
	]
	glp-mem-limit: "glp_mem_limit" [
		limit	[integer!]
		return: 	[void!]
	]
	glp-read-mps: "glp_read_mps" [
		lp	[pointer! [struct!]]
		fmt	[integer!]
		parm	[pointer! [void!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-write-mps: "glp_write_mps" [
		lp	[pointer! [struct!]]
		fmt	[integer!]
		parm	[pointer! [void!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-read-lp: "glp_read_lp" [
		lp	[pointer! [struct!]]
		parm	[pointer! [void!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-write-lp: "glp_write_lp" [
		lp	[pointer! [struct!]]
		parm	[pointer! [void!]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-mpl-read-model: "glp_mpl_read_model" [
		tran	[pointer! ["glp_tran"]]
		fname	[pointer! [byte!]]
		skip	[integer!]
		return: 	[integer!]
	]
	glp-mpl-read-data: "glp_mpl_read_data" [
		tran	[pointer! ["glp_tran"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-mpl-generate: "glp_mpl_generate" [
		tran	[pointer! ["glp_tran"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	glp-mpl-build-prob: "glp_mpl_build_prob" [
		tran	[pointer! ["glp_tran"]]
		prob	[pointer! [struct!]]
		return: 	[void!]
	]
	glp-mpl-postsolve: "glp_mpl_postsolve" [
		tran	[pointer! ["glp_tran"]]
		prob	[pointer! [struct!]]
		sol	[integer!]
		return: 	[integer!]
	]
	glp-mpl-free-wksp: "glp_mpl_free_wksp" [
		tran	[pointer! ["glp_tran"]]
		return: 	[void!]
	]
	glp-main: "glp_main" [
		argc	[integer!]
		argv	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define LPX			glp_prob
	#define LPX_LP			100
	#define LPX_MIP			101
	#define LPX_FR			110
	#define LPX_LO			111
	#define LPX_UP			112
	#define LPX_DB			113
	#define LPX_FX			114
	#define LPX_MIN			120
	#define LPX_MAX			121
	#define LPX_P_UNDEF			132
	#define LPX_P_FEAS			133
	#define LPX_P_INFEAS			134
	#define LPX_P_NOFEAS			135
	#define LPX_D_UNDEF			136
	#define LPX_D_FEAS			137
	#define LPX_D_INFEAS			138
	#define LPX_D_NOFEAS			139
	#define LPX_BS			140
	#define LPX_NL			141
	#define LPX_NU			142
	#define LPX_NF			143
	#define LPX_NS			144
	#define LPX_T_UNDEF			150
	#define LPX_T_OPT			151
	#define LPX_CV			160
	#define LPX_IV			161
	#define LPX_I_UNDEF			170
	#define LPX_I_OPT			171
	#define LPX_I_FEAS			172
	#define LPX_I_NOFEAS			173
	#define LPX_OPT			180
	#define LPX_FEAS			181
	#define LPX_INFEAS			182
	#define LPX_NOFEAS			183
	#define LPX_UNBND			184
	#define LPX_UNDEF			185
	#define LPX_E_OK			200
	#define LPX_E_EMPTY			201
	#define LPX_E_BADB			202
	#define LPX_E_INFEAS			203
	#define LPX_E_FAULT			204
	#define LPX_E_OBJLL			205
	#define LPX_E_OBJUL			206
	#define LPX_E_ITLIM			207
	#define LPX_E_TMLIM			208
	#define LPX_E_NOFEAS			209
	#define LPX_E_INSTAB			210
	#define LPX_E_SING			211
	#define LPX_E_NOCONV			212
	#define LPX_E_NOPFS			213
	#define LPX_E_NODFS			214
	#define LPX_E_MIPGAP			215
	#define LPX_K_MSGLEV			300
	#define LPX_K_SCALE			301
	#define LPX_K_DUAL			302
	#define LPX_K_PRICE			303
	#define LPX_K_RELAX			304
	#define LPX_K_TOLBND			305
	#define LPX_K_TOLDJ			306
	#define LPX_K_TOLPIV			307
	#define LPX_K_ROUND			308
	#define LPX_K_OBJLL			309
	#define LPX_K_OBJUL			310
	#define LPX_K_ITLIM			311
	#define LPX_K_ITCNT			312
	#define LPX_K_TMLIM			313
	#define LPX_K_OUTFRQ			314
	#define LPX_K_OUTDLY			315
	#define LPX_K_BRANCH			316
	#define LPX_K_BTRACK			317
	#define LPX_K_TOLINT			318
	#define LPX_K_TOLOBJ			319
	#define LPX_K_MPSINFO			320
	#define LPX_K_MPSOBJ			321
	#define LPX_K_MPSORIG			322
	#define LPX_K_MPSWIDE			323
	#define LPX_K_MPSFREE			324
	#define LPX_K_MPSSKIP			325
	#define LPX_K_LPTORIG			326
	#define LPX_K_PRESOL			327
	#define LPX_K_BINARIZE			328
	#define LPX_K_USECUTS			329
	#define LPX_K_BFTYPE			330
	#define LPX_K_MIPGAP			331
	#define LPX_C_COVER			01h
	#define LPX_C_CLIQUE			02h
	#define LPX_C_GOMORY			04h
	#define LPX_C_MIR			08h
	#define LPX_C_ALL			FFh
	#define lpx_create_prob			_glp_lpx_create_prob
	#define lpx_set_prob_name			_glp_lpx_set_prob_name
	lpx-set-prob-name: "lpx_set_prob_name" [
		lp	[pointer! ["LPX"]]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	#define lpx_set_obj_name			_glp_lpx_set_obj_name
	lpx-set-obj-name: "lpx_set_obj_name" [
		lp	[pointer! ["LPX"]]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	#define lpx_set_obj_dir			_glp_lpx_set_obj_dir
	lpx-set-obj-dir: "lpx_set_obj_dir" [
		lp	[pointer! ["LPX"]]
		dir	[integer!]
		return: 	[void!]
	]
	#define lpx_add_rows			_glp_lpx_add_rows
	lpx-add-rows: "lpx_add_rows" [
		lp	[pointer! ["LPX"]]
		nrs	[integer!]
		return: 	[integer!]
	]
	#define lpx_add_cols			_glp_lpx_add_cols
	lpx-add-cols: "lpx_add_cols" [
		lp	[pointer! ["LPX"]]
		ncs	[integer!]
		return: 	[integer!]
	]
	#define lpx_set_row_name			_glp_lpx_set_row_name
	lpx-set-row-name: "lpx_set_row_name" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	#define lpx_set_col_name			_glp_lpx_set_col_name
	lpx-set-col-name: "lpx_set_col_name" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		name	[pointer! [byte!]]
		return: 	[void!]
	]
	#define lpx_set_row_bnds			_glp_lpx_set_row_bnds
	lpx-set-row-bnds: "lpx_set_row_bnds" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		type	[integer!]
		lb	[double!]
		ub	[double!]
		return: 	[void!]
	]
	#define lpx_set_col_bnds			_glp_lpx_set_col_bnds
	lpx-set-col-bnds: "lpx_set_col_bnds" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		type	[integer!]
		lb	[double!]
		ub	[double!]
		return: 	[void!]
	]
	#define lpx_set_obj_coef			_glp_lpx_set_obj_coef
	lpx-set-obj-coef: "lpx_set_obj_coef" [
		lp	[pointer! [struct!]]
		j	[integer!]
		coef	[double!]
		return: 	[void!]
	]
	#define lpx_set_mat_row			_glp_lpx_set_mat_row
	lpx-set-mat-row: "lpx_set_mat_row" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[void!]
	]
	#define lpx_set_mat_col			_glp_lpx_set_mat_col
	lpx-set-mat-col: "lpx_set_mat_col" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[void!]
	]
	#define lpx_load_matrix			_glp_lpx_load_matrix
	lpx-load-matrix: "lpx_load_matrix" [
		lp	[pointer! ["LPX"]]
		ne	[integer!]
		ia	[integer!]
		ja	[integer!]
		ar	[double!]
		return: 	[void!]
	]
	#define lpx_del_rows			_glp_lpx_del_rows
	lpx-del-rows: "lpx_del_rows" [
		lp	[pointer! ["LPX"]]
		nrs	[integer!]
		num	[integer!]
		return: 	[void!]
	]
	#define lpx_del_cols			_glp_lpx_del_cols
	lpx-del-cols: "lpx_del_cols" [
		lp	[pointer! ["LPX"]]
		ncs	[integer!]
		num	[integer!]
		return: 	[void!]
	]
	#define lpx_delete_prob			_glp_lpx_delete_prob
	lpx-delete-prob: "lpx_delete_prob" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_get_prob_name			_glp_lpx_get_prob_name
	*lpx-get-prob-name: "*lpx_get_prob_name" [
		lp	[pointer! ["LPX"]]
		return: 	[byte!]
	]
	#define lpx_get_obj_name			_glp_lpx_get_obj_name
	*lpx-get-obj-name: "*lpx_get_obj_name" [
		lp	[pointer! ["LPX"]]
		return: 	[byte!]
	]
	#define lpx_get_obj_dir			_glp_lpx_get_obj_dir
	lpx-get-obj-dir: "lpx_get_obj_dir" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_num_rows			_glp_lpx_get_num_rows
	lpx-get-num-rows: "lpx_get_num_rows" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_num_cols			_glp_lpx_get_num_cols
	lpx-get-num-cols: "lpx_get_num_cols" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_row_name			_glp_lpx_get_row_name
	*lpx-get-row-name: "*lpx_get_row_name" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[byte!]
	]
	#define lpx_get_col_name			_glp_lpx_get_col_name
	*lpx-get-col-name: "*lpx_get_col_name" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[byte!]
	]
	#define lpx_get_row_type			_glp_lpx_get_row_type
	lpx-get-row-type: "lpx_get_row_type" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[integer!]
	]
	#define lpx_get_row_lb			_glp_lpx_get_row_lb
	lpx-get-row-lb: "lpx_get_row_lb" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_get_row_ub			_glp_lpx_get_row_ub
	lpx-get-row-ub: "lpx_get_row_ub" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_get_row_bnds			_glp_lpx_get_row_bnds
	lpx-get-row-bnds: "lpx_get_row_bnds" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		typx	[pointer! [integer!]]
		lb	[pointer! [double!]]
		ub	[pointer! [double!]]
		return: 	[void!]
	]
	#define lpx_get_col_type			_glp_lpx_get_col_type
	lpx-get-col-type: "lpx_get_col_type" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[integer!]
	]
	#define lpx_get_col_lb			_glp_lpx_get_col_lb
	lpx-get-col-lb: "lpx_get_col_lb" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_get_col_ub			_glp_lpx_get_col_ub
	lpx-get-col-ub: "lpx_get_col_ub" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_get_col_bnds			_glp_lpx_get_col_bnds
	lpx-get-col-bnds: "lpx_get_col_bnds" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		typx	[pointer! [integer!]]
		lb	[pointer! [double!]]
		ub	[pointer! [double!]]
		return: 	[void!]
	]
	#define lpx_get_obj_coef			_glp_lpx_get_obj_coef
	lpx-get-obj-coef: "lpx_get_obj_coef" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_get_num_nz			_glp_lpx_get_num_nz
	lpx-get-num-nz: "lpx_get_num_nz" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_mat_row			_glp_lpx_get_mat_row
	lpx-get-mat-row: "lpx_get_mat_row" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_get_mat_col			_glp_lpx_get_mat_col
	lpx-get-mat-col: "lpx_get_mat_col" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_create_index			_glp_lpx_create_index
	lpx-create-index: "lpx_create_index" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_find_row			_glp_lpx_find_row
	lpx-find-row: "lpx_find_row" [
		lp	[pointer! ["LPX"]]
		name	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_find_col			_glp_lpx_find_col
	lpx-find-col: "lpx_find_col" [
		lp	[pointer! ["LPX"]]
		name	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_delete_index			_glp_lpx_delete_index
	lpx-delete-index: "lpx_delete_index" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_scale_prob			_glp_lpx_scale_prob
	lpx-scale-prob: "lpx_scale_prob" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_unscale_prob			_glp_lpx_unscale_prob
	lpx-unscale-prob: "lpx_unscale_prob" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_set_row_stat			_glp_lpx_set_row_stat
	lpx-set-row-stat: "lpx_set_row_stat" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		stat	[integer!]
		return: 	[void!]
	]
	#define lpx_set_col_stat			_glp_lpx_set_col_stat
	lpx-set-col-stat: "lpx_set_col_stat" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		stat	[integer!]
		return: 	[void!]
	]
	#define lpx_std_basis			_glp_lpx_std_basis
	lpx-std-basis: "lpx_std_basis" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_adv_basis			_glp_lpx_adv_basis
	lpx-adv-basis: "lpx_adv_basis" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_cpx_basis			_glp_lpx_cpx_basis
	lpx-cpx-basis: "lpx_cpx_basis" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_simplex			_glp_lpx_simplex
	lpx-simplex: "lpx_simplex" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_exact			_glp_lpx_exact
	lpx-exact: "lpx_exact" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_status			_glp_lpx_get_status
	lpx-get-status: "lpx_get_status" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_prim_stat			_glp_lpx_get_prim_stat
	lpx-get-prim-stat: "lpx_get_prim_stat" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_dual_stat			_glp_lpx_get_dual_stat
	lpx-get-dual-stat: "lpx_get_dual_stat" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_obj_val			_glp_lpx_get_obj_val
	lpx-get-obj-val: "lpx_get_obj_val" [
		lp	[pointer! ["LPX"]]
		return: 	[double!]
	]
	#define lpx_get_row_stat			_glp_lpx_get_row_stat
	lpx-get-row-stat: "lpx_get_row_stat" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[integer!]
	]
	#define lpx_get_row_prim			_glp_lpx_get_row_prim
	lpx-get-row-prim: "lpx_get_row_prim" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_get_row_dual			_glp_lpx_get_row_dual
	lpx-get-row-dual: "lpx_get_row_dual" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_get_row_info			_glp_lpx_get_row_info
	lpx-get-row-info: "lpx_get_row_info" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		tagx	[pointer! [integer!]]
		vx	[pointer! [double!]]
		dx	[pointer! [double!]]
		return: 	[void!]
	]
	#define lpx_get_col_stat			_glp_lpx_get_col_stat
	lpx-get-col-stat: "lpx_get_col_stat" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[integer!]
	]
	#define lpx_get_col_prim			_glp_lpx_get_col_prim
	lpx-get-col-prim: "lpx_get_col_prim" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_get_col_dual			_glp_lpx_get_col_dual
	lpx-get-col-dual: "lpx_get_col_dual" [
		lp	[pointer! [struct!]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_get_col_info			_glp_lpx_get_col_info
	lpx-get-col-info: "lpx_get_col_info" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		tagx	[pointer! [integer!]]
		vx	[pointer! [double!]]
		dx	[pointer! [double!]]
		return: 	[void!]
	]
	#define lpx_get_ray_info			_glp_lpx_get_ray_info
	lpx-get-ray-info: "lpx_get_ray_info" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_check_kkt			_glp_lpx_check_kkt
	lpx-check-kkt: "lpx_check_kkt" [
		lp	[pointer! ["LPX"]]
		scaled	[integer!]
		kkt	[pointer! ["LPXKKT"]]
		return: 	[void!]
	]
	#define lpx_warm_up			_glp_lpx_warm_up
	lpx-warm-up: "lpx_warm_up" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_eval_tab_row			_glp_lpx_eval_tab_row
	lpx-eval-tab-row: "lpx_eval_tab_row" [
		lp	[pointer! ["LPX"]]
		k	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_eval_tab_col			_glp_lpx_eval_tab_col
	lpx-eval-tab-col: "lpx_eval_tab_col" [
		lp	[pointer! ["LPX"]]
		k	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_transform_row			_glp_lpx_transform_row
	lpx-transform-row: "lpx_transform_row" [
		lp	[pointer! ["LPX"]]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_transform_col			_glp_lpx_transform_col
	lpx-transform-col: "lpx_transform_col" [
		lp	[pointer! ["LPX"]]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		return: 	[integer!]
	]
	#define lpx_prim_ratio_test			_glp_lpx_prim_ratio_test
	lpx-prim-ratio-test: "lpx_prim_ratio_test" [
		lp	[pointer! ["LPX"]]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		how	[integer!]
		tol	[double!]
		return: 	[integer!]
	]
	#define lpx_dual_ratio_test			_glp_lpx_dual_ratio_test
	lpx-dual-ratio-test: "lpx_dual_ratio_test" [
		lp	[pointer! ["LPX"]]
		len	[integer!]
		ind	[integer!]
		val	[double!]
		how	[integer!]
		tol	[double!]
		return: 	[integer!]
	]
	#define lpx_interior			_glp_lpx_interior
	lpx-interior: "lpx_interior" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_ipt_status			_glp_lpx_ipt_status
	lpx-ipt-status: "lpx_ipt_status" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_ipt_obj_val			_glp_lpx_ipt_obj_val
	lpx-ipt-obj-val: "lpx_ipt_obj_val" [
		lp	[pointer! ["LPX"]]
		return: 	[double!]
	]
	#define lpx_ipt_row_prim			_glp_lpx_ipt_row_prim
	lpx-ipt-row-prim: "lpx_ipt_row_prim" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_ipt_row_dual			_glp_lpx_ipt_row_dual
	lpx-ipt-row-dual: "lpx_ipt_row_dual" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_ipt_col_prim			_glp_lpx_ipt_col_prim
	lpx-ipt-col-prim: "lpx_ipt_col_prim" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_ipt_col_dual			_glp_lpx_ipt_col_dual
	lpx-ipt-col-dual: "lpx_ipt_col_dual" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_set_class			_glp_lpx_set_class
	lpx-set-class: "lpx_set_class" [
		lp	[pointer! ["LPX"]]
		klass	[integer!]
		return: 	[void!]
	]
	#define lpx_get_class			_glp_lpx_get_class
	lpx-get-class: "lpx_get_class" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_set_col_kind			_glp_lpx_set_col_kind
	lpx-set-col-kind: "lpx_set_col_kind" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		kind	[integer!]
		return: 	[void!]
	]
	#define lpx_get_col_kind			_glp_lpx_get_col_kind
	lpx-get-col-kind: "lpx_get_col_kind" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[integer!]
	]
	#define lpx_get_num_int			_glp_lpx_get_num_int
	lpx-get-num-int: "lpx_get_num_int" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_get_num_bin			_glp_lpx_get_num_bin
	lpx-get-num-bin: "lpx_get_num_bin" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_integer			_glp_lpx_integer
	lpx-integer: "lpx_integer" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_intopt			_glp_lpx_intopt
	lpx-intopt: "lpx_intopt" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_mip_status			_glp_lpx_mip_status
	lpx-mip-status: "lpx_mip_status" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_mip_obj_val			_glp_lpx_mip_obj_val
	lpx-mip-obj-val: "lpx_mip_obj_val" [
		lp	[pointer! ["LPX"]]
		return: 	[double!]
	]
	#define lpx_mip_row_val			_glp_lpx_mip_row_val
	lpx-mip-row-val: "lpx_mip_row_val" [
		lp	[pointer! ["LPX"]]
		i	[integer!]
		return: 	[double!]
	]
	#define lpx_mip_col_val			_glp_lpx_mip_col_val
	lpx-mip-col-val: "lpx_mip_col_val" [
		lp	[pointer! ["LPX"]]
		j	[integer!]
		return: 	[double!]
	]
	#define lpx_check_int			_glp_lpx_check_int
	lpx-check-int: "lpx_check_int" [
		lp	[pointer! ["LPX"]]
		kkt	[pointer! ["LPXKKT"]]
		return: 	[void!]
	]
	#define lpx_reset_parms			_glp_lpx_reset_parms
	lpx-reset-parms: "lpx_reset_parms" [
		lp	[pointer! ["LPX"]]
		return: 	[void!]
	]
	#define lpx_set_int_parm			_glp_lpx_set_int_parm
	lpx-set-int-parm: "lpx_set_int_parm" [
		lp	[pointer! ["LPX"]]
		parm	[integer!]
		val	[integer!]
		return: 	[void!]
	]
	#define lpx_get_int_parm			_glp_lpx_get_int_parm
	lpx-get-int-parm: "lpx_get_int_parm" [
		lp	[pointer! ["LPX"]]
		parm	[integer!]
		return: 	[integer!]
	]
	#define lpx_set_real_parm			_glp_lpx_set_real_parm
	lpx-set-real-parm: "lpx_set_real_parm" [
		lp	[pointer! ["LPX"]]
		parm	[integer!]
		val	[double!]
		return: 	[void!]
	]
	#define lpx_get_real_parm			_glp_lpx_get_real_parm
	lpx-get-real-parm: "lpx_get_real_parm" [
		lp	[pointer! ["LPX"]]
		parm	[integer!]
		return: 	[double!]
	]
	#define lpx_read_mps			_glp_lpx_read_mps
	*lpx-read-mps: "*lpx_read_mps" [
		fname	[pointer! [byte!]]
		return: 	["LPX"]
	]
	#define lpx_write_mps			_glp_lpx_write_mps
	lpx-write-mps: "lpx_write_mps" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_read_bas			_glp_lpx_read_bas
	lpx-read-bas: "lpx_read_bas" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_write_bas			_glp_lpx_write_bas
	lpx-write-bas: "lpx_write_bas" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_read_freemps			_glp_lpx_read_freemps
	*lpx-read-freemps: "*lpx_read_freemps" [
		fname	[pointer! [byte!]]
		return: 	["LPX"]
	]
	#define lpx_write_freemps			_glp_lpx_write_freemps
	lpx-write-freemps: "lpx_write_freemps" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_read_cpxlp			_glp_lpx_read_cpxlp
	*lpx-read-cpxlp: "*lpx_read_cpxlp" [
		fname	[pointer! [byte!]]
		return: 	["LPX"]
	]
	#define lpx_write_cpxlp			_glp_lpx_write_cpxlp
	lpx-write-cpxlp: "lpx_write_cpxlp" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_read_model			_glp_lpx_read_model
	*lpx-read-model: "*lpx_read_model" [
		model	[pointer! [byte!]]
		data	[pointer! [byte!]]
		output	[pointer! [byte!]]
		return: 	["LPX"]
	]
	#define lpx_print_prob			_glp_lpx_print_prob
	lpx-print-prob: "lpx_print_prob" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_print_sol			_glp_lpx_print_sol
	lpx-print-sol: "lpx_print_sol" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_print_sens_bnds			_glp_lpx_print_sens_bnds
	lpx-print-sens-bnds: "lpx_print_sens_bnds" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_print_ips			_glp_lpx_print_ips
	lpx-print-ips: "lpx_print_ips" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_print_mip			_glp_lpx_print_mip
	lpx-print-mip: "lpx_print_mip" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		return: 	[integer!]
	]
	#define lpx_is_b_avail			_glp_lpx_is_b_avail
	lpx-is-b-avail: "lpx_is_b_avail" [
		lp	[pointer! ["LPX"]]
		return: 	[integer!]
	]
	#define lpx_write_pb			_glp_lpx_write_pb
	lpx-write-pb: "lpx_write_pb" [
		lp	[pointer! ["LPX"]]
		fname	[pointer! [byte!]]
		normalized	[integer!]
		binarize	[integer!]
		return: 	[integer!]
	]
	#define lpx_main			_glp_lpx_main
	lpx-main: "lpx_main" [
		argc	[integer!]
		argv	[pointer! [byte!]]
		return: 	[integer!]
	]
]]